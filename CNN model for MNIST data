# https://keras.io/
!pip install -q keras
import keras


import numpy as np

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Add
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils

from keras.datasets import mnist
from keras import backend as k


(X_train, y_train), (X_test, y_test) = mnist.load_data()

print (X_train.shape)
from matplotlib import pyplot as plt
%matplotlib inline
plt.imshow(X_train[0])


img_rows, img_cols=28, 28
  
if k.image_data_format() == 'channels_first': 
   X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols) 
   X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols) 
   inpx = (1, img_rows, img_cols) 
  
else:
   X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1) 
   X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1) 
   inpx = (img_rows, img_cols, 1) 


X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

Y_train[:10]



from keras.layers import Activation
model = Sequential()

 
model.add(Convolution2D(32, 3, 3, activation='relu', input_shape=(28,28,1)))
model.add(Convolution2D(64, 3, 3, activation='relu'))
model.add(MaxPooling2D(pool_size=(3, 3)))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(250, activation='sigmoid'))
model.add(Dense(10, activation='softmax'))


model.summary()

model.compile(loss=keras.losses.categorical_crossentropy,
             optimizer=keras.optimizers.Adadelta(),
             metrics=['accuracy'])


model.fit(X_train, Y_train, batch_size=500, epochs=12)

score = model.evaluate(X_test, Y_test, verbose=0)

print(score)
